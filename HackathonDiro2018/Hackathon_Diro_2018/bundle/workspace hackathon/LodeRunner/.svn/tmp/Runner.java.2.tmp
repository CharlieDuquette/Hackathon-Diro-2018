package ca.umontreal.iro.hackathon.loderunner;

import java.util.List;
import java.util.PriorityQueue;

import sunrise.GameEntity;
import sunrise.astar.AStar;
import sunrise.astar.Graph;
import sunrise.astar.NodeAStar;
import sunrise.vector.Vector2d;

/**
 *
 */
public class Runner extends BasicRunner {

    // TODO : Remplacer ceci par votre clé secrète
    public static final String ROOM = "cccc";

    /* Utilisez cette variable pour choisir le niveau de départ
     *
     * Notez: le niveau de départ sera 1 pour tout
     * le monde pendant la compétition :v)
     */
    public static final int START_LEVEL = 1;
    
    private GameEntity[][] elements;
    
    private int index;
    private List<NodeAStar> listeDeNoeud;   
    private List<NodeAStar> listeDeSous;
    
    private NodeAStar currentPosition;
    private NodeAStar expectedPosition;
    private NodeAStar doorPosition;
    
    private PriorityQueue<Move> nextActions;
    
    public Runner() {
        super(ROOM, START_LEVEL);
    }

    @Override
    public void start(String[] grid) {
    	nextActions = new PriorityQueue<Move>();
    	
        elements = new GameEntity[grid[0].length()][grid.length];
        
        /*for (int i=0; i<grid[0].length(); i++) {
            for(int j = 0; j < grid.length; j++){
            	elements[i][j] = GameEntity.fromString(String.valueOf(grid[j].charAt(i)));
            	if(elements[i][j].equals( GameEntity.Sortie)) {
            		doorPosition = new NodeAStar(new Vector2d(i, j)); 
            	}
            }
        }*/
        
        elements = new GameEntity[3][2];
        elements[2][0] = GameEntity.Runner;
        elements[1][0] = GameEntity.CaseVide;
        elements[0][0] = GameEntity.Sortie;
        elements[2][1] = GameEntity.BlockBrique;
        elements[1][1] = GameEntity.BlockBrique;
        elements[0][1] = GameEntity.BlockBrique;
        
        
        printMap();
    }

    @Override
    public Move next(int x, int y) {    	
    	currentPosition = new NodeAStar(new Vector2d(x, y));
    	
    	if(nextActions.isEmpty()){
    		if(!expectedPosition.getPos().equals(currentPosition.getPos())) {
    			elements[(int) currentPosition.getPos().getX()][(int) currentPosition.getPos().getX()] = GameEntity.CaseVide;
    			listeDeNoeud = AStar.search(new Graph(elements), currentPosition, doorPosition);
<<<<<<< .mine
    		index = 0;
    	}
    	
    	int direction = Direction.prochaineDirectionAStar(listeDeNoeud, index);
		Direction dir = Direction.fromInt(direction);
    	index = index + 1;
    	expectedPosition = listeDeNoeud.get(index);
    	
    	Move nextMove = new Move(Event.MOVE, dir);
    	
    	return nextMove;
=======
    			index = 0;
    		}
    	    	
    		int direction = Direction.prochaineDirectionAStar(listeDeNoeud, index);
    		Direction dir = Direction.fromInt(direction);
        	
        	Move nextMove = new Move(Event.MOVE, dir);
        	
        	expectedPosition = listeDeNoeud.get(++index);

            return nextMove;
    	} else {
    		if(nextActions.peek().event.equals(Event.MOVE)){
    			
    		}
    		
    		return nextActions.remove();
    	}
>>>>>>> .r44252
    }
    
    public void printMap(){
    	for(int j = 0; j < elements[0].length; j++){
    		for(int i = 0; i < elements.length; i++){
    			System.out.print(elements[i][j]);
    		}
    		
    		System.out.println();
    	}
    }
}
