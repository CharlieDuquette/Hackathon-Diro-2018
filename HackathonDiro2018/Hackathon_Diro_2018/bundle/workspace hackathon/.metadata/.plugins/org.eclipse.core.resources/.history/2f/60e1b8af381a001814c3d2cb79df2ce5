package ca.umontreal.iro.hackathon.loderunner;

import java.util.List;

import sunrise.astar.NodeAStar;

public enum Direction {
    NONE(0), UP(1), LEFT(2), DOWN(3), RIGHT(4);
    
    private final int id;

    Direction(int id) {
        this.id = id;
    }

    public int getValue() {
        return id;
    }
    
    public static Direction fromInt(int n) {
        switch(n) {
            case 1:
                return UP;
            case 2:
                return LEFT;
            case 3:
                return DOWN;
            case 4:
                return RIGHT;
        }

        return NONE;
    }
    
    public static int prochaineDirectionAStar(List<NodeAStar> listeDeNoeud, int index){
    	NodeAStar noeudInitiale = listeDeNoeud.get(index);
    	
    	if(index + 1>= listeDeNoeud.size()){
    		return 0;
    	}
    	
    	NodeAStar noeudFinale = listeDeNoeud.get(index + 1);
    	double x= noeudInitiale.getPos().getX() -  noeudFinale.getPos().getX();
    	double y= noeudInitiale.getPos().getY() -  noeudFinale.getPos().getY();
    	if(x == 0) {
    		if (y>0) {
    			return 1;
    		}else if(y < 0){
    			return 3;
    		}
    	}
    	if (y==0){
    		if (x>0) {
    			return 2;
    		}else if (x < 0) {
    			return 4;
    		}
    	}
    	return 0;
    }
}
